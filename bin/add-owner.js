/* Usage:
 * 
 *   add-owner [--config CONFIG] [--owner '@....']
 *
 * Declare that OWNER is one of the owners of the ssb network specified by CONFIG
 * In order to do this, you need to be in posession of the private netwoek key
 * generated by tre-init. It is automatically retrieved from the network and is 
 * then used to sign a new message of type `network-owner`.
 *
 * OWNER defaults to your public key
 * CONFIG defaults to `require('rc')('tre')`
*/

const client = require('tre-cli-client')
const pull = require('pull-stream')
const ssbKeys = require('scuttlebot-release/node_modules/ssb-keys')

function getNetworkKeypair(ssb, keys, cb) {
  pull(
    ssb.createUserStream({id: keys.id}),
    pull.take(1),
    pull.collect( (err, result) => {
      if (err) return cb(err)
      const content = result[0].value.content
      const unboxed = ssbKeys.unbox(content, keys.private)
      return cb(null, unboxed.netKeys)
    })
  )
}

function bail(err) {
  if (!err) return
  console.error(err.message)
  process.exit(1)
}

client( (err, ssb, conf, keys) =>{
  bail(err)
  const owner = conf.owner || keys.id
  getNetworkKeypair(ssb, keys, (err, keys) =>{
    bail(err)
    const signed = ssbKeys.signObj(keys.private, {
      network: conf.network,
      'owned-by': owner
    })
    const verified = ssbKeys.verifyObj(conf.network.substr(1), signed)
    if (!verified) bail(new Error('Signature does is invalid. This should not happen.'))
    ssb.publish({
      type: 'network-owner',
      declaration: signed
    }, (err, result) => {
      bail(err)
      console.log(JSON.stringify(result, null, 2))
      ssb.close()
    })
  })
})
